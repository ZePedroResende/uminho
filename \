module Ficha1 where 
import Cp

length1 :: [a] -> Int 
length1 y = foldl (\ a _ -> a+1) 0 y  

reverse1 :: [a] -> [a]
reverse1 x = foldl (\ acc x ->x:acc)  [] x

catMaybes :: [Maybe a] -> [a]
catMaybes []  = []
catMaybes ((Nothing):t) = ( catMaybes t)
catMaybes ((Just a):t) = (a: catMaybes t )

uncurry :: (a -> b -> c) -> (a,b)-> c
uncurry f a b = f(a,b)

curry :: ((a , b) -> c) -> a->b-> c
curry f(a,b) = f a b

flip :: (a->b->c)->b->a->c
flip f a b = f b a

data LTree a = Leaf a | Fork (LTree a,LTree a) deriving Show 


